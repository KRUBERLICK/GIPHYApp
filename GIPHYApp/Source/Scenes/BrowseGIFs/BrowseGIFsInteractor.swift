//
//  BrowseGIFsInteractor.swift
//  GIPHYApp
//
//  Created by Daniel Ilchishyn on 11/2/17.
//  Copyright (c) 2017 KRUBERLICK. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol BrowseGIFsBusinessLogic {
    func reloadFeed(request: BrowseGIFs.FetchGIFs.Request)
    func fetchNextPage()
}

protocol BrowseGIFsDataStore {
    var displayedGIFs: BrowseGIFs.FetchGIFs.ViewModel { get set }
}

class BrowseGIFsInteractor: BrowseGIFsBusinessLogic, BrowseGIFsDataStore {
    var presenter: BrowseGIFsPresentationLogic?

    var worker: BrowseGIFsWorker? {
        didSet {
            setWorkerSubscription()
        }
    }

    var displayedGIFs: BrowseGIFs.FetchGIFs.ViewModel = BrowseGIFs.FetchGIFs.ViewModel(displayedItems: [])
    private var disposeBag = DisposeBag()
    
    private func setWorkerSubscription() {
        worker?.contents.asObservable().skip(1)
            .subscribe(onNext: { [weak self] contents in
                guard let strongSelf = self else {
                    return
                }
                strongSelf.displayedGIFs = BrowseGIFs.FetchGIFs.ViewModel(displayedItems: contents.map { BrowseGIFs.FetchGIFs.ViewModel.Item(gif: $0) })
                strongSelf.presenter?.displayFetchedGIFs(response: BrowseGIFs.FetchGIFs.Response(data: contents))
            })
            .disposed(by: disposeBag)
    }

    func reloadFeed(request: BrowseGIFs.FetchGIFs.Request) {
        guard let worker = worker else {
            return
        }
        worker.query = request.query
        worker.reloadFeed()
    }

    func fetchNextPage() {
        worker?.requestNextChunk()
    }
}

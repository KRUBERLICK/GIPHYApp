//
//  BrowseGIFsViewController.swift
//  GIPHYApp
//
//  Created by Daniel Ilchishyn on 11/2/17.
//  Copyright (c) 2017 KRUBERLICK. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import IGListKit

protocol BrowseGIFsDisplayLogic: class {
    func displayFetchedGIFs(viewModel: BrowseGIFs.FetchGIFs.ViewModel)
    func selectGIF(viewModel: BrowseGIFs.SelectGIF.ViewModel)
    func didSelectGIF(viewModel: BrowseGIFs.SelectGIF.ViewModel)
}

class BrowseGIFsViewController: ContentViewController, BrowseGIFsDisplayLogic {
    var interactor: BrowseGIFsBusinessLogic?
    var router: (NSObjectProtocol & BrowseGIFsRoutingLogic & BrowseGIFsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = BrowseGIFsInteractor()
        let presenter = BrowseGIFsPresenter()
        let router = BrowseGIFsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter

        let localURLProvider = LocalURLProvider()
        let localStore = GIFsCoreDataStore(localURLProvider: localURLProvider)
        let webService = GIPHYAPIService()
        gifUpdatesBroadcast = GIFUpdatesBroadcast()

        interactor.worker = BrowseGIFsWorker(localStore: localStore, webService: webService, localURLProvider: localURLProvider, gifUpdatesBroadcast: gifUpdatesBroadcast)
        
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        let layout = ConcatCollectionViewLayout(stickyHeaders: false, topContentInset: 0, stretchToEdge: false)
        collectionView.collectionViewLayout = layout
        collectionViewEmptyView = loadingIndicatorView
        adapter.collectionView = collectionView
        searchController.searchBar.delegate = self
        reloadFeed()
    }

    // MARK: Subviews

    @IBOutlet weak var collectionView: UICollectionView!

    lazy var searchController: UISearchController = {
        let controller = UISearchController(searchResultsController: nil)
        controller.dimsBackgroundDuringPresentation = false
        controller.searchBar.tintColor = .white
        controller.searchBar.enablesReturnKeyAutomatically = true
        return controller
    }()
    
    private lazy var loadingIndicatorView: UIActivityIndicatorView = {
        let view = UIActivityIndicatorView(activityIndicatorStyle: .gray)
        view.startAnimating()
        return view
    }()
    
    private lazy var noContentPlaceholderView: UILabel = {
        let view = UILabel(frame: .zero)
        view.text = "Nothing to display"
        view.textAlignment = .center
        return view
    }()
    
    private var collectionViewEmptyView: UIView!

    // MARK: Properties
    
    private let autoTailLoadingNumScreenfulls: CGFloat = 2.5

    private lazy var adapter: ListAdapter = {
        let adapter = ListAdapter(updater: ListAdapterUpdater(), viewController: self)
        adapter.dataSource = self
        return adapter
    }()
    
    private var gifUpdatesBroadcast: GIFUpdatesBroadcast!
    private var query: String = ""

    // MARK: Fetch GIFs

    func reloadFeed() {
        let request = BrowseGIFs.FetchGIFs.Request(query: query)
        interactor?.reloadFeed(request: request)
    }

    func fetchNextPage() {
        interactor?.fetchNextPage()
    }

    func displayFetchedGIFs(viewModel: BrowseGIFs.FetchGIFs.ViewModel) {
        collectionViewEmptyView = noContentPlaceholderView
        adapter.performUpdates(animated: true, completion: nil)
    }
    
    // MARK: Select GIF
    
    func selectGIF(viewModel: BrowseGIFs.SelectGIF.ViewModel) {
        let request = BrowseGIFs.SelectGIF.Request(vm: viewModel)
        interactor?.selectGIF(request: request)
    }
    
    func didSelectGIF(viewModel: BrowseGIFs.SelectGIF.ViewModel) {
        performSegue(withIdentifier: "ViewGIF", sender: nil)
    }
}

// MARK: ListAdapterDataSource

extension BrowseGIFsViewController: ListAdapterDataSource {
    func objects(for listAdapter: ListAdapter) -> [ListDiffable] {
        guard let dataStore = router?.dataStore else {
            return []
        }
        return dataStore.displayedGIFs.displayedItems
    }

    func listAdapter(_ listAdapter: ListAdapter, sectionControllerFor object: Any) -> ListSectionController {
        if let object = object as? BrowseGIFs.FetchGIFs.ViewModel.Item {
            return BrowseGIFsSectionController(viewModel: object, dependencies: BrowseGIFsSectionController.Dependencies(gifUpdatesBroadcast: gifUpdatesBroadcast))
        }
        fatalError("Unexpected object: \(object)")
    }

    func emptyView(for listAdapter: ListAdapter) -> UIView? {
        return collectionViewEmptyView
    }
}

extension BrowseGIFsViewController: ListScrollDelegate {
    func listAdapter(_ listAdapter: ListAdapter, didScroll sectionController: ListSectionController) {
        let currentOffsetY = collectionView.contentOffset.y
        let contentHeight = collectionView.contentSize.height
        let screenHeight = UIScreen.main.bounds.height
        let screenfullsBeforeBottom = (contentHeight - currentOffsetY) / screenHeight
        if screenfullsBeforeBottom < autoTailLoadingNumScreenfulls {
            fetchNextPage()
        }
    }
    
    func listAdapter(_ listAdapter: ListAdapter, willBeginDragging sectionController: ListSectionController) {}
    
    func listAdapter(_ listAdapter: ListAdapter, didEndDragging sectionController: ListSectionController, willDecelerate decelerate: Bool) {}
}

extension BrowseGIFsViewController: UISearchBarDelegate {
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        query = searchBar.text ?? ""
        scrollCVToTop()
        reloadFeed()
    }
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        query = ""
        scrollCVToTop()
        reloadFeed()
    }
    
    private func scrollCVToTop() {
        collectionView.scrollRectToVisible(CGRect(x: 0, y: 0, width: 1, height: 1), animated: true)
    }
}
